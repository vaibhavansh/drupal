var course_id = $('#edit-field-course-applied-for').val();
var courseStream_id = $('#edit-field-stream').val();

// call twice
var coursePromise = getTaxonomyByName(course_id);
var streamPromise = getTaxonomyByName(courseStream_id);

// wait for both
$.when(coursePromise, streamPromise).done(function(courseName, streamName) {
  // courseName and streamName contain the returned names
  console.log("Course name:", courseName);
  console.log("Stream name:", streamName);

  if (courseName == "Engineering") {
    // do something
  }
  if (streamName == "Mechanical") {
    // do something else
  }
}).fail(function(error) {
  console.error("Error fetching taxonomy names:", error);
});

getTaxonomyByName(23).then(function(name) {
  alert(name);  // shows the name directly
  console.log(name); // also logs the name
});

function getTaxonomyByName(id) {
  if (id == null) {
    return $.Deferred().reject('Invalid ID').promise();
  }

  var baseUrl = getBaseUrl();
  console.log("Base URL academic:", baseUrl);

  var taxonomyUrl = baseUrl + "taxonomy/" + id;
  console.log("Taxonomy URL academic:", taxonomyUrl);

  return $.ajax({
    url: taxonomyUrl,
    method: 'GET',
    dataType: 'json'
  }).then(function (data) {
    return data.name;
  }).fail(function (xhr, status, error) {
    console.error("Error fetching taxonomy:", status, error);
    return null;
  });
}

function getBaseUrl() {
  const { protocol, hostname, port, pathname } = window.location;

  // Split pathname into parts, e.g.:
  // "/dev-repo/cybage-khushboo/web/something" → ["dev-repo", "cybage-khushboo", "web", "something"]
  const pathParts = pathname.split('/').filter(Boolean);

  let basePath = '';

  // Only if we're on localhost or IP, include the folder structure
  if (hostname === 'localhost' || /^\d{1,3}(\.\d{1,3}){3}$/.test(hostname)) {
    // Adjust how many parts you take based on your actual folder structure
    // In your case: dev-repo / cybage-khushboo / web → need first 3 parts
    basePath = '/' + pathParts.slice(0, 3).join('/') + '/';
  } else {
    // On production, usually no subfolder: use root
    basePath = '/';
  }

  // Build final base URL
  return `${protocol}//${hostname}${port ? ':' + port : ''}${basePath}`;
}

// ✅ Usage example:
const baseUrl = getBaseUrl();
console.log("Dynamic Base URL:", baseUrl);

// Build your taxonomy URL:
const taxonomyUrl = baseUrl + "taxonomy";
console.log("Taxonomy URL:", taxonomyUrl);

async function getTaxonomyByName(id) {
  if (id == null) {
    return false;
  }

  const baseUrl = getBaseUrl();
  console.log("Base URL academic:", baseUrl);

  // Build dynamic taxonomy URL
  const taxonomyUrl = baseUrl + "taxonomy/" + id;
  console.log("Taxonomy URL academic:", taxonomyUrl);

  try {
    const response = await fetch(taxonomyUrl);

    if (!response.ok) {
      console.error("Fetch error, status:", response.status);
      throw new Error('Request failed');
    }

    const data = await response.json();
    return data.name;
  } catch (err) {
    console.error("Error fetching taxonomy:", err);
    throw err;  // re-throw or handle as needed
  }
}

function getBaseUrl() {
  const { protocol, hostname, port } = window.location;

  let baseUrl;

  // If localhost → add your local path
  if (hostname === "localhost") {
    baseUrl = `${protocol}//${hostname}${port ? ':' + port : ''}/dev-repo/cybage-khushboo/web/`;
  }
  // If IP address → just use the IP root
  else if (/^\d{1,3}(\.\d{1,3}){3}$/.test(hostname)) {
    baseUrl = `${protocol}//${hostname}${port ? ':' + port : ''}/`;
  }
  // Otherwise → use the current protocol + hostname + port
  else {
    baseUrl = `${protocol}//${hostname}${port ? ':' + port : ''}/`;
  }

  return baseUrl;
}

// Usage:
const baseUrl = getBaseUrl();
console.log("Base URL:", baseUrl);

// Example: taxonomy URL
const taxonomyUrl = baseUrl + "taxonomy";
console.log("Taxonomy URL:", taxonomyUrl);

<?php

namespace Drupal\taxonomy_tools\Controller;

use Drupal\Core\Controller\ControllerBase;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;

class TaxonomyToolsController extends ControllerBase {

  public function createVocabs() {
    // Array of vocabularies: machine name => label
    $vocabs_to_create = [
      'course' => 'Course',
      'stream' => 'Stream',
    ];

    $created = [];
    foreach ($vocabs_to_create as $machine_name => $label) {
      if (!Vocabulary::load($machine_name)) {
        $vocab = Vocabulary::create([
          'vid' => $machine_name,
          'description' => 'Created programmatically',
          'name' => $label,
        ]);
        $vocab->save();
        $created[] = $label;
      }
    }

    // ✅ Add field to "stream" vocabulary
    $field_name = 'field_reference_course';

    // Check if field storage exists (site-wide definition)
    if (!FieldStorageConfig::loadByName('taxonomy_term', $field_name)) {
      FieldStorageConfig::create([
        'field_name' => $field_name,
        'entity_type' => 'taxonomy_term',
        'type' => 'entity_reference',
        'settings' => [
          'target_type' => 'taxonomy_term',
        ],
        'cardinality' => -1, // unlimited
      ])->save();
    }

    // Check if field is attached to "stream" bundle
    if (!FieldConfig::loadByName('taxonomy_term', 'stream', $field_name)) {
      FieldConfig::create([
        'field_name' => $field_name,
        'entity_type' => 'taxonomy_term',
        'bundle' => 'stream',
        'label' => 'Reference Course',
        'settings' => [
          'handler' => 'default',
          'handler_settings' => [
            'target_bundles' => ['course' => 'course'],
          ],
        ],
      ])->save();
    }

    return [
      '#markup' => 'Created vocabularies: ' . implode(', ', $created) . ' and added field "Reference Course" to Stream vocabulary.',
    ];
  }
}


taxonomy_tools.create_vocabs:
  path: '/taxonomy-tools/create-vocab'
  defaults:
    _controller: '\Drupal\taxonomy_tools\Controller\TaxonomyToolsController::createVocabs'
    _title: 'Create Vocabularies'
  requirements:
    _permission: 'administer taxonomy'

taxonomy_tools.delete_vocabs:
  path: '/taxonomy-tools/delete-vocab'
  defaults:
    _controller: '\Drupal\taxonomy_tools\Controller\TaxonomyToolsController::deleteVocabs'
    _title: 'Delete Vocabularies'
  requirements:
    _permission: 'administer taxonomy'


<?php

namespace Drupal\taxonomy_tools\Controller;

use Drupal\Core\Controller\ControllerBase;
use Drupal\taxonomy\Entity\Vocabulary;

class TaxonomyToolsController extends ControllerBase {

  /**
   * Create vocabularies.
   */
  public function createVocabs() {
    // Array of vocabularies: machine name => label
    $vocabs_to_create = [
      'diploma' => 'Diploma',
      'engineering' => 'Engineering',
      'medicine' => 'Medicine',
    ];

    $created = [];
    foreach ($vocabs_to_create as $machine_name => $label) {
      // Check if vocabulary already exists
      if (!Vocabulary::load($machine_name)) {
        $vocab = Vocabulary::create([
          'vid' => $machine_name,
          'description' => 'Created programmatically',
          'name' => $label,
        ]);
        $vocab->save();
        $created[] = $label;
      }
    }

    return [
      '#markup' => 'Created vocabularies: ' . implode(', ', $created),
    ];
  }

  /**
   * Delete vocabularies.
   */
  public function deleteVocabs() {
    $vocabs_to_delete = ['diploma', 'engineering', 'medicine'];

    $deleted = [];
    foreach ($vocabs_to_delete as $machine_name) {
      if ($vocab = Vocabulary::load($machine_name)) {
        $vocab->delete();
        $deleted[] = $machine_name;
      }
    }

    return [
      '#markup' => 'Deleted vocabularies: ' . implode(', ', $deleted),
    ];
  }
}

