function getBaseUrl() {
  const hostname = window.location.hostname;

  // Check if hostname is 'localhost'
  if (hostname === "localhost") {
    return "http://localhost/dev-repo/cybage-khushboo/web/";
  }

  // Check if hostname is an IP address (simple regex)
  if (/^\d{1,3}(\.\d{1,3}){3}$/.test(hostname)) {
    return `http://${hostname}/`;
  }

  // Default: server URL
  return "https://test-cybage-khushboo.pantheonsite.io/";
}

// Usage:
const baseUrl = getBaseUrl();
console.log("Base URL:", baseUrl);

// Example: build taxonomy URL
const taxonomyUrl = baseUrl + "taxonomy";
console.log("Taxonomy URL:", taxonomyUrl);
<?php

namespace Drupal\taxonomy_tools\Controller;

use Drupal\Core\Controller\ControllerBase;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;

class TaxonomyToolsController extends ControllerBase {

  public function createVocabs() {
    // Array of vocabularies: machine name => label
    $vocabs_to_create = [
      'course' => 'Course',
      'stream' => 'Stream',
    ];

    $created = [];
    foreach ($vocabs_to_create as $machine_name => $label) {
      if (!Vocabulary::load($machine_name)) {
        $vocab = Vocabulary::create([
          'vid' => $machine_name,
          'description' => 'Created programmatically',
          'name' => $label,
        ]);
        $vocab->save();
        $created[] = $label;
      }
    }

    // âœ… Add field to "stream" vocabulary
    $field_name = 'field_reference_course';

    // Check if field storage exists (site-wide definition)
    if (!FieldStorageConfig::loadByName('taxonomy_term', $field_name)) {
      FieldStorageConfig::create([
        'field_name' => $field_name,
        'entity_type' => 'taxonomy_term',
        'type' => 'entity_reference',
        'settings' => [
          'target_type' => 'taxonomy_term',
        ],
        'cardinality' => -1, // unlimited
      ])->save();
    }

    // Check if field is attached to "stream" bundle
    if (!FieldConfig::loadByName('taxonomy_term', 'stream', $field_name)) {
      FieldConfig::create([
        'field_name' => $field_name,
        'entity_type' => 'taxonomy_term',
        'bundle' => 'stream',
        'label' => 'Reference Course',
        'settings' => [
          'handler' => 'default',
          'handler_settings' => [
            'target_bundles' => ['course' => 'course'],
          ],
        ],
      ])->save();
    }

    return [
      '#markup' => 'Created vocabularies: ' . implode(', ', $created) . ' and added field "Reference Course" to Stream vocabulary.',
    ];
  }
}


taxonomy_tools.create_vocabs:
  path: '/taxonomy-tools/create-vocab'
  defaults:
    _controller: '\Drupal\taxonomy_tools\Controller\TaxonomyToolsController::createVocabs'
    _title: 'Create Vocabularies'
  requirements:
    _permission: 'administer taxonomy'

taxonomy_tools.delete_vocabs:
  path: '/taxonomy-tools/delete-vocab'
  defaults:
    _controller: '\Drupal\taxonomy_tools\Controller\TaxonomyToolsController::deleteVocabs'
    _title: 'Delete Vocabularies'
  requirements:
    _permission: 'administer taxonomy'


<?php

namespace Drupal\taxonomy_tools\Controller;

use Drupal\Core\Controller\ControllerBase;
use Drupal\taxonomy\Entity\Vocabulary;

class TaxonomyToolsController extends ControllerBase {

  /**
   * Create vocabularies.
   */
  public function createVocabs() {
    // Array of vocabularies: machine name => label
    $vocabs_to_create = [
      'diploma' => 'Diploma',
      'engineering' => 'Engineering',
      'medicine' => 'Medicine',
    ];

    $created = [];
    foreach ($vocabs_to_create as $machine_name => $label) {
      // Check if vocabulary already exists
      if (!Vocabulary::load($machine_name)) {
        $vocab = Vocabulary::create([
          'vid' => $machine_name,
          'description' => 'Created programmatically',
          'name' => $label,
        ]);
        $vocab->save();
        $created[] = $label;
      }
    }

    return [
      '#markup' => 'Created vocabularies: ' . implode(', ', $created),
    ];
  }

  /**
   * Delete vocabularies.
   */
  public function deleteVocabs() {
    $vocabs_to_delete = ['diploma', 'engineering', 'medicine'];

    $deleted = [];
    foreach ($vocabs_to_delete as $machine_name) {
      if ($vocab = Vocabulary::load($machine_name)) {
        $vocab->delete();
        $deleted[] = $machine_name;
      }
    }

    return [
      '#markup' => 'Deleted vocabularies: ' . implode(', ', $deleted),
    ];
  }
}

